apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'bugly' //添加Bugly符号表插件

def environment = hasProperty('env') ? env : 'test'

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}


Properties props = new Properties()
props.load(new FileInputStream(file("signing.properties")))
android {
    compileSdkVersion 23
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        multiDexEnabled true
        applicationId "com.xianglin.fellowvillager.app"
        minSdkVersion BUILD_MIN_SDK_VERSION
        targetSdkVersion BUILD_TARGET_SDK_VERSION
        versionCode 131
        versionName APP_VEERSION_NAME

        manifestPlaceholders = [UM_CHANNEL_NAME_VALUE: "XiangLinXiaoZhan"
                                , UM_APP_KEY_VALUE   : "565c1b7567e58e1d9600361a"
                                , XL_ENV_VALUE       : "ENV_TEST"
                                , XL_DB_VER_VALUE    : "3"]

        // buildConfigField 'String','API_SERVER_URL','"http://test.flysnow.org/"'

        ndk {
//            moduleName "encrypt"
//            ldLibs "log", "z", "m"
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }

        release {
            keyAlias props['KEY_ALIAS']
            keyPassword props['KEY_PASSWORD']
            storeFile file(props['KEYSTORE_FILE'])
            storePassword props['KEYSTORE_PASSWORD']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
//            applicationIdSuffix '.debug'
            manifestPlaceholders = [UM_APP_KEY_VALUE: "565c1b7567e58e1d9600361a"
                                    , AMAP_LOCATION_KEY  : "0860396d7f82b4816404288079d43272"]
        }

        release {
            signingConfig signingConfigs.release
            if (environment == 'test') {
                manifestPlaceholders = [UM_APP_KEY_VALUE: "565c1b7567e58e1d9600361a"
                                        , XL_ENV_VALUE  : "ENV_TEST"
                                        , AMAP_LOCATION_KEY :"0860396d7f82b4816404288079d43272"]
            } else if (environment == 'test2') {
                manifestPlaceholders = [UM_APP_KEY_VALUE: "565c1b7567e58e1d9600361a"
                                        , XL_ENV_VALUE  : "ENV_TEST_2"
                                        , AMAP_LOCATION_KEY :"0860396d7f82b4816404288079d43272"]
            } else if (environment == 'dev') {
                manifestPlaceholders = [UM_APP_KEY_VALUE: "565c1b7567e58e1d9600361a"
                                        , XL_ENV_VALUE  : "ENV_DEV"
                                        , AMAP_LOCATION_KEY :"0860396d7f82b4816404288079d43272"]
            } else if (environment == 'p') {
                manifestPlaceholders = [UM_APP_KEY_VALUE: "565c1c2667e58e06420055d1"
                                        , XL_ENV_VALUE  : "ENV_PRODUCT"
                                        , AMAP_LOCATION_KEY :"0860396d7f82b4816404288079d43272"]
            } else if (environment == 'pp') {
                manifestPlaceholders = [UM_APP_KEY_VALUE: "565c1c2667e58e06420055d1"
                                        , XL_ENV_VALUE  : "ENV_PP_PRODUCT"
                                        , AMAP_LOCATION_KEY :"0860396d7f82b4816404288079d43272"]
            }
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if ('release'.equals(variant.buildType.name)
                            && output.outputFile != null
                            && output.outputFile.name.endsWith('.apk')) {
                        def apkFile = new File(
                                output.outputFile.getParent(),
                                "XLAPP_${variant.flavorName}_v${variant.versionName}_${buildTime()}.apk")
                        output.outputFile = apkFile
                    }
                }
            }
        }
    }

    sourceSets { main {
        aidl.srcDirs = ['src/main/aidl', 'src/main/aidl/']
        jniLibs.srcDirs = ['src/main/jniLibs']
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
    } }


    // 从channel.txt文件中读取渠道名字生成渠道
    def flavors = file("./channel.txt")
    productFlavors {
        flavors.eachLine { line ->
            line = line.trim();
            if (!line.equals("")) {
                "$line" {
                }
            }
        }
    }

    productFlavors.all {

        flavor -> flavor.manifestPlaceholders = [UM_CHANNEL_NAME_VALUE: name]

    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/maven/com.belerweb/pinyin4j/pom.properties'
        exclude 'META-INF/maven/com.belerweb/pinyin4j/pom.xml'
    }

    dexOptions {
//        preDexLibraries = false
//        incremental true
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}


assembleRelease.doLast {
    println("=====================assembleRelease.doLast.begin.=========================")

    // 把apk包拷贝到build/output_release_apks文件夹里，并做过滤，去除-unaligned.apk结尾的包
    copy {
        from('build/outputs/apk')
        into('build/output_release_apks')
        exclude '**/*-unaligned.apk'
    }

    println("=====================assembleRelease.doLast success.=========================")
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //    compile(name: 'longlink-release', ext: 'aar')
    //    compile(name: 'mobile-release', ext: 'aar')、
    //    compile project(':mobile')
    //    compile project(':longlink')
    compile "com.xianglin.app.mobile:mobile-lib:$LIB_MOBILE_VERSION"
    compile "com.xianglin.app.longlink:longlink-lib:$LIB_LONGLINK_VERSION"
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.tencent.bugly:crashreport:1.2.8'
    compile 'com.android.support:cardview-v7:23.3.0'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'org.androidannotations:androidannotations:3.3.2'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.umeng.analytics:analytics:5.6.4'
    compile 'com.google.protobuf:protobuf-java:2.6.1'
    compile 'com.android.support:recyclerview-v7:23.3.0'
    compile 'com.belerweb:pinyin4j:2.5.0'
    compile 'com.google.zxing:core:3.2.1'
    compile 'com.facebook.fresco:fresco:0.9.0'
    compile 'com.facebook.fresco:webpsupport:0.9.0'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile "org.androidannotations:androidannotations-api:$LIB_AA_VERSION"
    compile "com.xianglin.cif:cif-common-service-facade:$LIB_CIF_VERSION"
    compile "com.xianglin.appserv:appserv-common-service-facade:$LIB_APPSERV_VERSION"
    apt "org.androidannotations:androidannotations:$LIB_AA_VERSION"
}

bugly {
    appId = "900016489" //注册时分配的App ID
    appKey = "z5VV0MKuHUWPvGnF" //注册时分配的App Key
}


apt {
    arguments {
        androidManifestFile variant.outputs[0].processResources.manifestFile
        resourcePackageName "com.xianglin.fellowvillager.app"
    }
}
